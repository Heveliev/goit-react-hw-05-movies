{"version":3,"file":"static/js/170.f5617a60.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx","getApi/getApi.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const LinkButton = styled(NavLink)`\nborder: 1px solid black;\ntext-decoration: none;\ncolor:black;\nbackground-color:#FF33FF;\n`;\n\n\nexport const Box = styled.div`\ndispay:flex;\nflex-wrap:no-wrap;\n`;\nexport const Image = styled.img`\nwidth:250px;\nheight:350px;\ndisplay:inline;`;","import { fetchMovieDetails } from \"getApi/getApi\";\nimport { Suspense,useEffect, useState } from \"react\";\nimport { useParams, useLocation,NavLink, Outlet } from \"react-router-dom\";\nimport { LinkButton, Image, Box } from \"./MovieDetails.styled\";\n\n\n const MovieDetails = () => {\n      const URL = 'https://image.tmdb.org/t/p/w500';\n    const { movieId } = useParams();\n    const [movie, setMovie] = useState(null);\n    const location = useLocation();\n\n    useEffect(() => {\n fetchMovieDetails(movieId)\n            .then(resp => setMovie(resp))\n\n    }, [movieId])\n    const backHref = location.state?.from ?? '/';\n\n\n    return (<>\n    \n        <LinkButton to={backHref}>Go back</LinkButton>\n        {movie && (<Box>\n            <Image src={`${URL}${movie.poster_path}`} alt={movie.original_title} />\n            <div >\n                <h2>{movie.original_title}({movie.release_date.slice(0,4)})</h2>\n                <p>User Score: {Math.round(movie.vote_average * 10)}%</p>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n            <h3>Genres</h3>\n                <p>{movie.genres.map(genre => genre.name).join(',')}</p>\n            </div>\n            <h4>Additional information</h4>\n            <ul>\n                <li><NavLink to={`/movies/${movieId}/cast`}>Cast</NavLink></li>\n                <li><NavLink to={`/movies/${movieId}/reviews`}>Reviews</NavLink></li>\n            </ul>\n        </Box>\n        )\n        }\n        <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n                </Suspense>\n    </>\n    )\n}\n\nexport default MovieDetails;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c939ec4794622751dcf7fba01c4a07e9';\naxios.defaults.baseURL = BASE_URL;\n\nconst fetchTrendingMovies = async() => {\n    try {\n        const trendMovies = await axios(`trending/movie/day?api_key=${API_KEY}`);\n        return trendMovies.data.results;\n    } catch (error) {\n        throw new Error(error)\n    }\n}\n\n\n\nasync function fetchFilmByName(query){\n    try {\n        const nameMov = await axios(`search/movie?api_key=${API_KEY}&query=${query}&page=1`);\n        return nameMov.data.results;\n    } catch (error) {\n        \n    }\n}\n\n\nasync function fetchMovieDetails(id) {\n    try {\n        const movDet = await axios(`movie/${id}?api_key=${API_KEY}`);\n        return movDet.data;\n    } catch (error) {\n        throw new Error(error)\n    }\n}\n\n\nasync function fetchCast(id) {\n    try {\n        const movCast = await axios(`movie/${id}/credits?api_key=${API_KEY}`);\n        return movCast.data.cast\n    } catch (error) {\n        throw new Error(error)\n    }\n}\n\nasync function fetchReviews(id) {\n    try {\n        const movCast = await axios(`movie/${id}/reviews?api_key=${API_KEY}&page=1`);\n        return movCast.data.results\n    } catch (error) {\n        throw new Error(error)\n    }\n}\n\n\nexport {fetchTrendingMovies, fetchFilmByName, fetchMovieDetails,fetchCast, fetchReviews}"],"names":["LinkButton","styled","NavLink","Box","Image","movieId","useParams","useState","movie","setMovie","location","useLocation","useEffect","fetchMovieDetails","then","resp","backHref","state","from","to","src","poster_path","alt","original_title","release_date","slice","Math","round","vote_average","overview","genres","map","genre","name","join","Suspense","fallback","API_KEY","axios","fetchTrendingMovies","trendMovies","data","results","Error","fetchFilmByName","query","nameMov","id","movDet","fetchCast","movCast","cast","fetchReviews"],"sourceRoot":""}